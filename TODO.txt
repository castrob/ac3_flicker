Trabalho Prático - Arquitetura de Computadores III
Linguagem - C++
Igor Machado Seixas
João Paulo de Castro


|1o - fazer o parse de cada evento - DONE(castrob) 30/08
|   Evento 0 - (Amizade)
|   		UserA : UserID ( Existe/nao existe )
|   		UserB : UserID ( Existe/nao existe )
|   		TimeStamp : Number
|
|   Evento 1 - (Upload)
|		UserA : UserID ( Existe/nao existe )
|   		Foto : photoId
|   		TimeStamp : DateOfUpload
|
|   Evento 2 - (Faved)
|   		UserA : UserID ( Existe/nao existe )
|   		Foto : photoId
|   		TimeStamp : DateOfFaved


| 2o - Fazer leitura da entrada padrao ou ler de um arquivo existente - DONE(castrob) 31/08
|      colocar a string lida para encaixar na base do parse de eventos feito anteiormente.


| 3o - Remover @N de userId e encontrar maneira de armazenar sem ser em string - DONE(castrob) 01/09
|      REMOVIDO @N e Armazenado em Double

| 4o - Passar de Double (DONE)igormseixas/castrob 02/09
 
| 5o - Estruturar Objetos

| 6o - Construir Classe Graph // DONE(igormseixas) 02/09
 
| 6o - Estruturar Classe Graph // DONE(igormseixas) 02/09

 7o - Implementar busca em largura 

 8o - Paralelizar 

 Obs: Paulo recriei o seu metodo para tentar entender ele, e continuou dando o mesmo problema, acho que ele deveria testar primeiro na lista do dono se a pessoa é amiga dele antes de ir testando todas as primeiras posicoes, fazendo isso para cada vez que ele desce na lista. entao criei outro metodo que testa se esta na lista se nao estiver vai pro nivel de baixo, continuou dando um problema semelhante, entao criei um vetor de 5 posicoes cada uma representando um nivel de like durante a pesquisa, quando encontra a pessoa adiciona 1 para a posicao do array correspondente ao nivel, ao terminar a busca eu encontro a menor posicao que tem 1. é uma gambiarra, porq estou com sono e cansado, mas fiz porq acredito que pode ajudar voce e o igor a pensar em algo que nao seja uma gambiarra que faca a mesma coisa, ou ate mesmo uma funcao recursiva se for o caso. qualquer coisa te respondo quando acordar. abs











LINKS_UTEIS:
   Programacao C++ : http://www.cplusplus.com/reference/string/string/substr/ - - Documentacao c++ (substr)
                     http://www.inf.pucrs.br/~pinho/PRGSWB/OO/oocpp.html    - - - Classes e Construtores
                     https://gist.github.com/ProgDan/899906                 - - - Implementacao de Lista
